
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/about",
    "title": "About Me",
    "body": " Hello peeps! My name is Arvind Ram Sankar. I am currently pursuing a Master's degree in Electronics and Communication Engineering from IIIT Bangalore. I like to design and build websites, softwares and apps.  If you want to know more about me, you can easily stalk find me in one of the following places:   &nbsp; &nbsp;  &nbsp;  &nbsp;  &nbsp;WebsiteThis website is built with Jekyll and Mediumish template for Jekyll. Checkout Mediumish "
    }, {
    "id": 2,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                           How to Make your own CSS Framework - Part 3                              :               This article is the third part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way. . . :                                                                                                                                       Arvind Ram Sankar                                23 Dec 2020                                                                                                                                                                                                                                                                                                                  How to Make your own CSS Framework - Part 2                              :               This article is the second part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way. . . :                                                                                                                                       Arvind Ram Sankar                                11 Dec 2020                                                                                                                                                                All Stories:                                                                                                     How to Make your own CSS Framework - Part 1              :       This article is the first part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way to coding. These are the. . . :                                                               Arvind Ram Sankar                09 Dec 2020                                                                                                                                     Internet Privacy: Proxy Servers and VPN              :       Privacy is a huge concern on the internet, especially when there are companies making billions by selling users data. In this article, I’ll be mainly talking about Proxy servers and. . . :                                                               Arvind Ram Sankar                24 Nov 2020                                                                                                                                     Write beautiful reports in Markdown using Pandoc              :       There are lots of powerful things you can do with the Markdown editor. If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips. . . :                                                               Arvind Ram Sankar                15 Nov 2020                                                                                                                                     Tracking Without Bells and Whistles              :       This article talks about a completely new paradigm of object tracker. And what’s special about this tracker is that it requires only an object detector and nothing else! No additional. . . :                                                               Arvind Ram Sankar                15 Nov 2020                                                                                                                                     The Curious Case of Henry Molaison              :       The human brain is one of the most important part of our body and it took millions and millions of years of evolution to achieve this level of perfection. And. . . :                                                               Arvind Ram Sankar                01 Nov 2020                                                                                                                                     Welcome to Arvind's Blog              :       Welcome to my new blog. I’ll be posting a lot of interesting stuff here. Stay tuned for more!:                                                               Arvind Ram Sankar                25 Oct 2020                                            "
    }, {
    "id": 4,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/how-to-make-your-own-css-framework-part-3/",
    "title": "How to Make your own CSS Framework - Part 3",
    "body": "2020/12/23 - This article is the third part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way to coding. These are the things that I learnt while I built my own CSS Framework Sleek, which is completely useless. If you haven’t seen the two previous articles, go check it out here: How to Make your Own CSS Framework - Part 1 How to Make your Own CSS Framework - Part 2 Designing and other stuff: This is the final step before we start the coding. In this section we will mainly talk about the following things:  CSS Reset Media Queries for Responsive Design Coming Up with Design System     Tools for Designing   Typography   Color Scheme   If you are already familiar with these things, feel free to skip ahead. CSS Reset: Different people use different browsers, it maybe Firefox, Chrome, Safari or even Internet Explorer. We need to make sure that our style looks the same everywhere. This is where the CSS Reset comes in. CSS Reset does exactly what it sounds like, it resets the style so that we have a uniform and a consistent style across all types of browsers and devices. The code below shows what a CSS reset might look like. This is just a small subset. There are a lot of other components that require reset, for example tables, captions, textinput etc. 12345678910111213141516/* CSS reset */body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td {   margin:0;  padding:0;}html,body {  margin:0;  padding:0;}ol,ul {  list-style:none;}h1,h2,h3,h4,h5,h6 {  font-size:100%;  font-weight:normal;}We will be using Normalize CSS, which is a really small and an amazing reset. You can checkout the code for Normalize here. It is well documented and you’ll be able to clearly see what components are being reset to what values. Media Queries: A responsive design is one which works well on any device irrespective of the screen size. Obviously, in order to make that happen, you need to write CSS which is responsive. This is what media query helps us with. Media query allows you to write different CSS for different screen sizes. 12345678910@media only screen and (max-width: 600px) { body {  background-color: blue; }}@media only screen and (min-width: 600px) { body {  background-color: green; }}The above code sets the body background color as blue when the screen size is below 600px and sets it to green when the screen size is above 600px. Using media query, we can write CSS that looks perfect on all devices starting from desktops to smartphones. We will be setting breakpoints to distinguish different screen sizes and use different CSS for different breakpoints. Bootstrap uses the following breakpoints: 1234567891011121314/*Extra small devices (portrait phones, less than 576px)*//*No media query for 'xs' since this is the default in Bootstrap*//*Small devices (landscape phones, 576px and up)*/@media (min-width: 576px) { . . . }/*Medium devices (tablets, 768px and up)*/@media (min-width: 768px) { . . . }/*Large devices (desktops, 992px and up)*/@media (min-width: 992px) { . . . }/*Extra large devices (large desktops, 1200px and up)*/@media (min-width: 1200px) { . . . }We will be defining similar breakpoints for different devices and try to make the design more responsive. Design System: Before you can start making your framework, you need to have a design in mind. For example, if you want to build a button, you need to determine it’s size, the margin, the padding, size of the text inside the button, border radius and so much more. There are a lot of good design systems like Material Design or Ant Design which you can use for inspiration. Their websites have extensive guidelines about the design system. I am not really an expert in web design or UI/UX. But it is really easy to find a lot of good design guides and references on the internet. Tools for designing: My go to tool for designing is Figma. The main reason is that it’s an online tool and it offers upto 3 projects in free version, which is more than enough for me. There are lots of other good tools in the market like AdobeXD, Sketch. This article gives a really good comparison of some design tools. But always keep in mind that in the end, it’s just a design tool. What matters is what you build with it. A lot of people tend to waste time jumping from one tool to another. Just pick one which feels comfortable to use. You can always switch tools in the future if it doesn’t feel right. Most of the skills you pick up are transferable. Once you master one software, it won’t take much time to master a new one. Typography: This is another essential element to a CSS Framework. Your font defines your CSS framework. There are a plethora of font faces available for you to choose from. Picking the right font is just as important as anything else. Your font should be cohesive with the rest of your design. While browsing the web, I found this is really good Crash Course on Fonts. This will give you a good idea about types of font available for you to use. Personally, I tend to find Sans-serif Geometric Typefaces to be really attractive because they are simple and elegant. But the typeface also depends on your framework. If you are building some wacky CSS Framework like NES, you can even use Comic Sans. That’s totally upto you. But make sure it is in harmony with the rest of your framework. It shouldn’t stand out from the rest of the design. Color Scheme: There are a total of 256 x 256 x 256 combinations of color possible. It is generally preferred to pick a bunch of colors from this huge set and use it on your website. Again this is not something that I am expert at, but there is a whole subject about colors, how to choose appealing colors and what colors look good when you combine them. There are different color schemes like monochromatic, complimentary, triads etc. The Adobe Color is a really good online tool which gives you colors based on different schemes.  Adobe Color ToolThe image below shows the colors used in Bulma CSS Framework. If you have worked with different frameworks, you should know that a framework traditionally has colors like primary, success, danger etc. I’ve linked to various frameworks’ colors. Check them out and observe what colors they are using. Maybe you’ll find some inspiration for your own framework.   Bootstrap Colors  Material Design Colors  Semantic UI ColorsConclusion: In this article, we briefly went through some of the basic things involved in designing a CSS Framework. Since I am not good at designing, I decided to not write much about it. You can easily find more guides online about various things like color theory, typography etc. In the next article, we will finally start coding the CSS Framework. When building the framework, I will be mostly borrowing designs from Bootstrap and Bulma, since they are really popular and lloks good. Further Links: This is the third article out of a series of article I am going to write. I hope this gave you more insight into how to plan out your framework. This is still a work in progress. I will be finishing up these articles soon so that you can get started building your own framework. How to Make your Own CSS Framework - Part 1 How to Make your Own CSS Framework - Part 2 How to make your own CSS Framework - Coding/Documenting (Coming on 31st December) "
    }, {
    "id": 6,
    "url": "http://localhost:4000/how-to-make-your-own-css-framework-part-2/",
    "title": "How to Make your own CSS Framework - Part 2",
    "body": "2020/12/11 - This article is the second part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way to coding. These are the things that I learnt while I built my own CSS Framework Sleek, which is completely useless. If you haven’t seen the previous article, go check it out here: How to Make your Own CSS Framework - Part 1 Let’s start Planning: Now that you have decided to start making a CSS Framework, it’s time to start planning and chalk things out. There are two main things that you need to address at this stage:  Various CSS Architectures for Frameworks Complexity of your FrameworkBoth of these are something that you need to determine before you go any further. Let’s have a look at each one of them. CSS Architectures: Now, the unique thing about CSS is,it has no rules. What I mean is that there are several ways to achieve the same thing. For example, if you want to center a text, you can use text-align, or you can use margin and padding to align it, or you can use flexbox to justify it, or use a code that you copied from stackoverflow. It’s like a lawless jungle. Since CSS doesn’t have any such rules, people might end up writing haphazard code with weird classnames and styles. What are CSS Architectures?CSS architectures are guidelines on how to name, organize and write your CSS classes and styles with a focus on maintainability, scalability and reusability, which is really important when building a framework. You can use these architectures even when writing the CSS for a website. They help you write better CSS with a lot of flexibility. If you haven’t heard of CSS Architectures before, then this is a really good place to start. In this article, I’ll be looking at mainly four popular architectures:  OOCSS - Object Oriented CSS BEM - Block Element Modifier SMACSS - Scalable Modular Architecture for CSS ACSS - Atomic CSSAgain, these are not strict rules but rather guidelines to better organize your code. You need not stick completely to these guidelines. You can always go wild and modify it according to your needs. Object Oriented CSS (OOCSS): Object Oriented CSS is loosely based on object oriented programming. Object Oriented Programming promotes the use of classes, object with a focus on reusability and modularity. The aim of OOCSS is the same. But what does an object in OOCSS mean? Here, an object refers to any repeating style that can be converted into reusable code. If something repeats again and again, make it into a reusable snippet, as simple as that. Here is a quick overview of the OOCSS guidelines. Reusability: If you have something like this: 1234567891011. box1 {  margin: 10px;  padding: 10px;  background-color: red;}. box2{  margin: 10px;  padding: 10px;  background-color: green;}We can convert this into following: 1234567891011. box {  margin: 10px;  padding: 10px;}. redbox{  background-color: red;}. greenbox{  background-color: green;}And then you can use it HTML like &lt;div class= box redbox &gt; or &lt;div class= box greenbox &gt;. Separation of Skin and Structure: We should also separate the skin and structure of components. Structure involves physical attributes like height, width, margin, overflow, padding etc. Skin refers to visual details like color, font, border etc. Here is a simple example of separation of skin and structure: 123456789101112131415. box-structure{ width: 100px; height: 100px; margin: 10px;}. box-skin1{ border: 1px solid black; background-color: red;}. box-skin2{ border: 1px solid green; background-color: yellow;}Separating skin also improves modularity and reusability. A same structure can be used multiple times with different skins. Separation of Container and Content: Let’s say you have a &lt;div class= shape &gt; and an &lt;img&gt;  inside the div. Try to avoid combining the styles of parent and child. For example : 12345. shape img{ width: auto; height: auto; border: 1px solid black;}Doing this prevents reusability of code. Always separate the container and the content. Many of the popular frameworks such as Bootstrap and bulma use the OOCSS guidelines. This was just a brief overview of some of the OOCSS guidelines. You can read about it in this amazing article by Smashing Magazine or at it’s Github page. Block Element Modifier (BEM): The BEM contains guidelines on how one can go about naming their CSS classes.  BEM is actually a subset of the bigger OOCSS architecure. As it’s name suggests, in BEM you essentially split you CSS into blocks, elements and modifiers. Blocks : A block is a standalone entity that is meaningful on its own. Headers, footers, Forms etc fall can be considered as blocks. Elements : Elements are a part of a block that has no standalone meaning and is semantically tied to its block. Buttons in Navbar, Text Inputs in a form etc are elements associated with blocks. Modifiers : Modifiers are variants/extension of the Blocks and Elements. They might be offer different size, different color etc. Elements of a block class . block{} are denoted as . block__element{} and a modifier is denoted as . block--modifier{}. The codepen below illustrates an example of BEM based CSS  See the Pen  BEM by R Arvind (@r-arvind) on CodePen. This was just a simple overview of the BEM style guide. You can find out more about it on it’s website BEM. Scalable Modular Architecture for CSS (SMACSS): SMACSS provides a way to maintain and organize your code such that it is scalable and modular. It divides the complete CSS codebase into five different categories:  Base : Base contains the code for all the default values. For example, you might want to remove all margins from html, or set a default size for h1, h2 etc. All of these fall under this category. 12345678910111213html {  margin: 0;  padding: 0;  font-family: Arial;}a {  color: #ffffff;}h1 {  font-size: 50px;} Layout : These components help divide the page into major sections. This includes components like header, footer, body etc. Layout in SMCSS   Modules : These are the reusable modular components of a design. That includes components like buttons, cards, alerts, lists etc     State : State describe how things look when in a particular state (hidden/expanded or active/inactive). These are generally prefixed with is-. For example, is-active, is-inactive, is-expanded, is-hidden.     Theme : Theme define things that have to do with the appearance like a color scheme or typography etc.  Frameworks like Bulma and PureCSS follow the SMACSS guidelines. The SMACSS website has more in-depth information about each one of those categories. But this much should be enough to proceed further. Atomic CSS (ACSS): Atomic CSS is completely different from conventional CSS Architecture. Tailwind CSS uses Atomic design and if you have used it before you must know that it is quite a unique way of working with CSS.  Atomic CSS is the approach to CSS architecture that favors small, single-purpose classes with names based on visual function. Atomic CSS, also known as Functional CSS is nothing but a collection of single purpose styling units. Atomic CSS is like a common “vocabulary” meant to style documents regardless of context or content. The code below shows a simple example: 123456789101112131415161718192021/*red background*/. bg-r{ background-color: #eb4034;}/*green background*/. bg-g{ background-color: #34eb59;}/*small margin*/. mr-s{ margin: 10px;}/*medium margin*/. mr-m{ margin: 20px;}You can keep building CSS vocabulary like this and use it in your HTML. The codepen below illustrates the same.  See the Pen  Atomic CSS by R Arvind (@r-arvind) on CodePen.  The CSS classes themselves are small and immutable, you cannot modify them. And the most important thing is that Atomic CSS is unopinionated. It’s not a framework with fancy components having fancy design. Rather, it’s just a bunch of utility classes that you can put to use. You can construct your own design out of these utility classes. Which architecture is the best?: When we build our own CSS Framework in Part 4 of this series, we won’t be sticking to any one architecture. These are just guidelines to facilitate the process of making the framework. We will be borrowing a lot of concepts from these architectures and build one of our own. For example, we will use SMACSS guidelines to organize our folder, we will use OOCSS and BEM to name our classes and structure the styles and we will build some utility classes just like in Atomic CSS. There is no such thing as the “best” architecture. Each has it’s own set of advantages, disadvantages and use cases. You are free to choose whichever framework depending on what your vision for the framework is. Complexity of your Framework: The complexity of your framework can lie anywhere between 0 to 10, with frameworks like PureCSS and Milligram at level 1 and frameworks like Bootstrap, Semantic and Foundation at a level of 10. Remember, there is nothing right or wrong here. Bootstrap is complex because Bootstrap is meant for rapid prototyping. You can put together a big website using bootstrap in a matter of minutes; just put a navbar at the top, a jumbotron, a couple of cards, some grid layout and you are set. PureCSS on the other hand is meant to be simple and extensible. It’s less than 10kB and it only comes with a few basic components, typographies and layouts. You can easily extend it with your own CSS or combine it with any other frameworks too. The complexity of your framework depends on what your vision for the framework is. You don’t need to stuff it with all sorts of different components, unless that’s what your aim is. If you are building one for learning purposes, it doesn’t exactly matter what you are doing. You are free to make it however you want because no one is probably gonna use it. If you want to make a design system as a part of an organization or for yourself, start small. First implement the bare minimums like buttons and layouts that are used frequently. Incrementally add more and more components until you have a collection of components. And finally, if you are building it for other people to use, you might wanna think about how it is different from the existing ones out there. Does your framework offer a superior design? Or maybe some components that people use frequently but isn’t provided by any existing frameworks. What is it’s selling point? It should be really good in order to make people leave their existing framework and use a new one. Most of the developers take a liking to framework and never come out of the comfort zone. If it’s just another framework with a couple of layouts, buttons and cards, no one will probably use it, just like my framework Sleek. Here’s an Assignment for you: Go through the components list of each and every framework out there, have a look at the various components they offer and how they look, feel and work. Make a list of components that you would like to have in the V0. 0. 1 of your framework. Here’s a link to some of the framework’s documentation. My favourite component to start off with is the button. So, I have linked to buttons of all these frameworks. Use this as a starting point and check out all the other components.  Bulma Bootstrap Semantic Pure CSS Milligram Foundation UIKitRemember, only choose components that are essential. You can always add more components in the future. Conclusion: If you managed to read till this point, I hope this article gives some insight into what goes into planning a CSS framework. When you finish your planning, you should have an idea about the components that you will be including in your framework and have some clarity on different CSS architectures. In the next article, we will talk about some basic design guidlines after which we will start coding the framework in SASS. Further Links: This is the second article out of a series of article I am going to write. I hope this gave you more insight into how to plan out your framework. This is still a work in progress. I will be finishing up these articles soon so that you can get started building your own framework. How to make your own CSS Framework - Designing How to make your own CSS Framework - Coding/Documenting (Coming on 31st December) There are various other architecture likes SuitCSS which I haven’t mentioned here for the purpose of keeping this aricle short and concise. You can find more about it by just seraching them on the internet. "
    }, {
    "id": 7,
    "url": "http://localhost:4000/how-to-make-your-own-css-framework-part-1/",
    "title": "How to Make your own CSS Framework - Part 1",
    "body": "2020/12/09 - This article is the first part of a comprehensive guide on how to build your own CSS framework, starting from planning, designing all the way to coding. These are the things that I learnt while I built my own CSS Framework Sleek, which is completely useless. Introduction: CSS Framework is a must have tool for building a web application, especially if you are not a designer like me. In fact, I always start developing a new project by first choosing a JS and a CSS framework. There are a lot of good options out there, just to list a few:  Bootstrap Bulma Tailwind Semantic UIAnd there is my CSS framework too!  SleekUnfortunately, it was really bad and no one used it, not even me. But I’m here to make sure you don’t make the same mistakes that I did. In this article I’ll talk about how I went about building one and how you can build yours too. We will see how to plan, design, and code your CSS Framework in detail. It will be a long and arduous journey, so buckle up! Now, before you start spending hours on building one, I have a question for you: Why do you want to build a CSS Framework?: Personally, I built it because I wanted to learn how to build one. If you are here for that, good for you. It’ll be a really great learning experience. Another reason might be that you have a design system of your own, some buttons and components that you designed and you want a small CSS framework so that you can easily use it easily for your other projects. That is also a really good motive. But if you are here hoping to build a CSS framework that you want thousands of people to use, then I want you to ask yourself: What unique feature does my CSS Framework offer. Is it worth spending your precious time to build one? What is it that you are offerring that the dozens of frameworks out there don’t already have? Maybe it’s a new design, maybe it’s a bunch of really good components, maybe it’s a new way to write CSS. Unless your CSS framework is really good, it won’t attract the attention of developers and it will end up going to the CSS Framework graveyard, next to mine. Now, for those of you who are still willing to make a framework, let’s move on to the juicy stuff. How to build a CSS Framework: The process of building a CSS Framework can be essentially summed up into these four broad category: Planning: A lot of planning is involved in the building of a CSS framework. We will be looking at these things in detail in another article. Just to get you started, these are some questions that you might wanna think about:    What type of framework do you want to build? A simple, minimalistic one like PureCSS or a full fledged powerhouse like Bootstrap.     What components will your framework be offering? Based on the answer to the previous question, you can either make a framework with just a couple different buttons and texts or complicated ones like navbar, accordions, dropdowns etc which might even require JS.     What architecture do you want to follow? There are several architectures such as SMACSS (Scalable Modular Architecture for CSS) or OOCSS (Object Oriented CSS) or Atomic CSS. Tailwind uses atomic architecture whereas Bulma uses SMACSS. This is something that you need to decide upon before building your framework.  You can read more on planning here: How to Make your Own CSS Framework - Part 2 Designing: Now this is the core part of the process. You need to design your components! You have to make buttons, specify the padding, margins, width, fonts, colors and so much more! This is the place where you can show your creativity! The main topics to tackle in the designing phase are:  Designing Components Color Palette TypographyWe won’t be going in-depth since I’m not exactly a designer and I am not qualified to talk about these. But I’ll mention the important things you need to lookout for while designing. You can read more about designing here: How to Make your Own CSS Framework - Part 3 Coding: This is the where we get hands on and start to implement the designs. This will be a long, boring and repititive task. We will mainly have a look at:  How to setup a node environment for your framework Setup SASS and facilitate the process of building css and css. min.  Writing your framework Building a complete pipeline starting from compiling to hosting your project online. Documenting: This is something that I completely forgot about when I was building my framework Sleek. Sleek’s documentation is still incomplete because too many things got piled up and I never got time to finish. Documentation is just as important as anything else in this process. No documentation means no on can use your framework!. Whoever wants to use your framework will use the documentation for reference. So if the documentation isn’t good, however good your framework might be, no one will use it. Therefore, this has to go hand in hand with the coding process. Now, there are a few automatic document generators out there. But remember, you are building a CSS framework here. So your documentation website should use your CSS framework and not generate it manually. Therefore, automatic generators are a no go. You will have to do it on your own. If you do know a better method, comment it below or send it to me. I’ll be more than happy to put it up here. Further Links: This is the first article out of a series of article I am going to write. I hope this gave you some food for thought and got you motivated for building your own CSS Framework! This is still a work in progress. I will be finishing up these articles soon so that you can get started building your own framework. How to make your own CSS Framework - Planning How to make your own CSS Framework - Designing How to make your own CSS Framework - Coding/Documenting (Coming on 31st December) In the meantime, you can go ahead and look at other resources or find out more about things I’ve mentioned in this article like SMACSS and OOCSS. "
    }, {
    "id": 8,
    "url": "http://localhost:4000/internet-privacy-proxy-servers-and-vpn/",
    "title": "Internet Privacy: Proxy Servers and VPN",
    "body": "2020/11/24 - Privacy is a huge concern on the internet, especially when there are companies making billions by selling users data. In this article, I’ll be mainly talking about Proxy servers and VPN, two of the most common ways to maintain anonymity on the internet. Incognito Doesn’t Work: For all you out there who might think that you are completely anonymous if you use incgnito mode, well guess what, you are wrong. Incognito mode is only good at preventing anyone with access to your computer from easily finding your activities. It clears all the browsing history, all the cookies so that anyone using your computer will not be able to see what you did. But the rest of the internet can still see what you are doing. The website that you just accessed in incognito mode still knows your location and so does your internet service provider. You can use What is My IP Address to see what others on the internet see your location as. Now the whole point is, we need something better to hide ourself and protect our privacy. Now, before we look at what proxy and VPN is, let’s try to get a general understanding of how internet works. How private is internet?: Let’s say you open the browser and type https://google. com. When you enter the url on your browser and press search, your phone starts sending packets of information through the wi-fi router. These packets contain information about the source and destination in their header. This is obvious because all the nodes in the network need this information in order to route the packet from source to destination and vice versa. But this means that all the nodes in the network can see where the packet came from and where it is going to. That is why you are able to google and find information about your public IP address and your IP’s location. The only thing preventing the internet from pinpointing your exact location is the NAT setup by the ISP. Even the server you are communicating with has lots of information about you. Therefore, anything you do on the web can easily be traced back to you. There is absolutely zero privacy there. And as we saw, incognito doesn’t work in this case because all incognito does is delete you history and session cookies. Now, let’s have a look at what a Proxy is and how it offers privacy. Proxy Server: Proxy here serves the exact same purpose as it’s definition, which is a substitute, or someone else who represents you. We often hear people using the word proxy in the context of accessing blocked websites. For example, In my school computers, websites like youtube,facebook are blocked by a firewall. We often used proxies to bypass the firewall. A proxy server essentially acts as your substitute and fetches content from the internet for you.  This image shows how we can use a proxy to access the blocked facebook website. In this case, the firewall believes that you are communicating with some server and allows you to do it. But this server inturn communicates with facebook and fetches content on your behalf and sends it over to you. But proxies are more than just means to bypass firewalls, they also provide a certain degree of privacy. Proxy and Privacy: A proxy essentially acts as your gateway to the internet. Now, there are different types of proxies offering different levels of security. A Transparent proxy is the least secure. It simply forwards the request they get and they are the least secure. They don’t try to hide the users IP address and just forward whatever request they get. Anonymous proxy takes your request and replaces the source IP with it’s own IP. So when you access facebook, as far as the rest of the internet is concerned, it’s just proxy accessing facebook. The facebook servers will receive the Proxy’s IP and they don’t have any clue about who is on the other side of the proxy. But the disadvantage with anonymous proxies is that they don’t hide the fact that they are proxies. If some sites choose to deny service to proxy users, you won’t be able to visit them while using an anonymous proxy. Since anonymous proxies do hide your IP address, they’re not a bad choice if you’re looking to gain a bit of control over your online privacy. Consider High anonymity proxies — also known as elite proxies — a step up from your regular anonymous proxy. The fundamentals are the same, except high anonymity proxies also disguise your use of the proxy itself. A website won’t be able to detect that you’re using a proxy if you use one of these. High anonymity proxies achieve this added protection by periodically altering your new IP address and also withholding any clues that they are serving as proxies on your behalf. They’re the most secure type of proxy. Proxy can be further improved by caching websites, filtering content etc which provides extra speed and security. But proxy is not 100% secure. So, do proxies not maintain privacy on the internet? Well, upto a certain extent. Highly anonymous proxies do provide a high degree of privacy.  But proxies definitely aren’t 100% secure. Someone with access to the proxy server can easily get information about all the transactions and can trace back to the user. And one more important thing to remember is that a proxy can only provide privacy for the things that you do on your browser. Virtual Private Network: Although Proxies provide a decent level of privacy, the only thing they are good at is hiding your IP address. VPNs are a step above Proxies as they can hide your IP address and provide an encrypted connection too!VPNs provide “device protection” and it protects all your traffic, including your browser, wherever you have a VPN installed and enabled. VPNs provide added security and privacy for all your online activity. We know that the internet is a public resource, so what exactly does a private network mean here? What is a Private network: According to wikipedia, a private network is any connection within a specified network wherein restrictions are established to promote a secured environment. In a more simpler term, a network can be configured in such a way that devices outside the network cannot access it. But the devices within the network can access contents outside the private network. So yes, your home wifi is a type of private network. If you check your IP, it’ll probably show something like 192. 168. something. something or 172. something. something. something. These are your private IP addresses. All the devices connected to the same wi-fi network can access you through this address. But devices outside the network cannot access your system using this IP address. A Virtual Private Network (VPN) extends a private network across a public network and enables users to send and receive data across shared or public networks as if their computing devices were directly connected to the private network. So this VPN technology was actually developed to provide access to corporate applications and resources to remote or mobile users, and to branch offices. Later, for security, the private network connection started using an encrypted layered tunneling protocol, and users were required to pass various authentication methods to gain access to the VPN. Now, VPN is also used for privacy on the internet. Let’s have a look at what VPN is and how it works. How do VPNs work?: One thing to note is that VPN completely removes your Internet Service Provider (ISP) out of the picture. Instead of routing the packet to the destination through your ISP, we establish a secure connection to one of the VPN nodes/servers. If you open a VPN application, you usually see different countries listed. So these are the available VPN nodes. The VPN service providers like Nord VPN etc sets up a network of servers all over the world. When you choose a server, the VPN client app that you downloaded establishes a secure tunnel connection from your device to the server bypassing ISPs or any other person who might be lurking in the network. THe VPN service provider use various algortihms like IPSec to encrypt the connection and provide protection at IP level. Your device is now seen as being on the same local network as your VPN. So your IP address will actually be the IP address of one of your VPN Provider’s servers. A VPN connection usually works like this. Data is transmitted from your client machine to the connected node in the VPN network through a secure tunnel. The VPN node receives the packets and all relevant information, it then encrypts your data and sends it through the internet. Another node in the VPN network decrypts your data and sends it to the appropriate internet resource, maybe a web server, an email server, or your company’s intranet. Then the internet resource sends data back to a point in your VPN network, where it gets encrypted. That encrypted data is sent through the internet to another point in your VPN network, which decrypts the data and sends it back to your client machine. That brings us to the next question. How secure are VPNs?: Like with any online software or service, the security of a VPN will be reliant on a number of factors. In the case of VPNs, these factors include:  The kind of technology the VPN provider uses There are different protocols for establishing secure connections. IPsec is one. There are other protocols such as OpenVPN, Secure Socket Tunneling Protocol etc. Most of these protocols are fool proof and do provide a good amount of security.  The laws in your country and the VPN providerThroughout this connection process, your identity is only revealed to the VPN node that you get connected to. Most of the VPN providers usually keep a log of all the connections to their network. Based on the laws surrounding VPN, the VPN provider might be forced to submit the user history if forced to do so. In countries like China, VPN is completely banned and you can be put into jail for using it. VPN use is also banned completely in Belarus, North Korea and Iraq. VPN vs Proxy: The difference can be summed up in a single sentence “A proxy is just a gateway whereas a VPN is a tunnel”. Another thing to note is that a connection to proxy goes through your ISP, so it is still possible to trace back to you. In the case of a VPN, only the VPN node knows your identity, which is known to the VPN service provider. As long as the VPN provider keeps it safe, your data will be 100% private. Conclusion: And this is 100% true. There is nothing that provides complete privacy. The Internet is all about connecting all the devices in the world, and if you access something over the internet it can always be traced back to you. The only thing that matters is how easy it is to trace back to you. So a normal internet connection is like sitting in your house with a door open, if you consider the fact that HTTPS is encrypted, it’s similar to sitting in your house with your door closed, but not locked. Anyone can open it. Using proxy locks the door, but there is still a back door that can be used to get into your house. VPN locks all the doors but the person who has the key can definitely enter your house. So it depends on how safe the key is. In the end nothing is completely private. It’s just a matter of how easy you make it for others to dig up stuff. "
    }, {
    "id": 9,
    "url": "http://localhost:4000/writing-beautiful-reports-in-markdown/",
    "title": "Write beautiful reports in Markdown using Pandoc",
    "body": "2020/11/15 - There are lots of powerful things you can do with the Markdown editor. If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips about the types of things you can do with Markdown! This time, I’ll be talking about how to write beautiful reports in markdown using pandoc Preview: We will be using this template for making our reporAs well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:  strike through ==highlight== *escaped characters*Writing code blocks: There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, like this. Larger snippets of code can be displayed across multiple lines using triple back ticks: 123. my-link {  text-decoration: underline;}HTML: 12345&lt;li class= ml-1 mr-1 &gt;  &lt;a target= _blank  href= # &gt;  &lt;i class= fab fa-twitter &gt;&lt;/i&gt;  &lt;/a&gt;&lt;/li&gt;CSS: 12345678. highlight . c {  color: #999988;  font-style: italic; }. highlight . err {  color: #a61717;  background-color: #e3d2d2; }JS: 123456789// alertbar later$(document). scroll(function () {  var y = $(this). scrollTop();  if (y &gt; 280) {    $('. alertbar'). fadeIn();  } else {    $('. alertbar'). fadeOut();  }});Python: 1print( Hello World )Ruby: 123require 'redcarpet'markdown = Redcarpet. new( Hello World! )puts markdown. to_htmlC: 1printf( Hello World ); Reference lists: The quick brown jumped over the lazy. Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference. Full HTML: Perhaps the best part of Markdown is that you’re never limited to just Markdown. You can write HTML directly in the Markdown editor and it will just work as HTML usually does. No limits! Here’s a standard YouTube embed code as an example: "
    }, {
    "id": 10,
    "url": "http://localhost:4000/tracking-without-bells-and-whistles/",
    "title": "Tracking Without Bells and Whistles",
    "body": "2020/11/15 - This article talks about a completely new paradigm of object tracker. And what’s special about this tracker is that it requires only an object detector and nothing else! No additional training or additional algorithm is required for tracking objects. Hence the name tracking without bells and whistles. You can checkout the complete research paper at arXiv. org. This article gives an overview of the paper. Tracking by detection: Tracking by detection is a paradigm of object tracking algorithm that use an object detector as a basis for performing object tracking. Modern Object detectors such as YOLO and FRCNN are able to achieve extremely high accuracy with very low computation time. Therefore, we might as well use object detectors for performing tracking. Tracking by detection can be essentially simplified to the following three steps:    Perform object detection on frame at time t.     Perform object detection on frame at time t+1     Map the objects detected in frame t to the objects detected in frame t+1  The third step is known as data association as it involves associating objects detected in one frame to that of another. There are various algorithms for performing data association. We can also use different types of object detectors for performing the object detection step. Several object trackers such as SORT and deepSORT use this paradigm of object tracking. Revisiting Object Detector: In order to understand how this new object tracker works, we need to go back to the basics and understand how single and multiple object detectors work. Single Object Detector: In a CNN based object detector, we generally have a VGG backbone network which converts an image into feature maps. We stretch out these features maps into a fully connected layer.  Then we can use the Fully Connected Layer to perform a classification based on class label and a regression for bounding boxes. You can read more about this on the internet. When you pass an image to object detector the output looks something like this: You get a list of bounding boxe coordinates and a class probability attached to it. We pick the one with the highest probability as the output. Multiple Object Detector: Now that we have seen how a single object detector works, let’s fast forward to multiple object detection. In this case, we will be looking at Faster RCNN. An FRCNN is in some ways similar to a single object detector. The only addition is the presence of a Region Proposal Network, which proposes the regions where the likelihood of finding an object is extremely high. Once we get these regions from the RPN, we perform a pooling of the region of interests, and then as usual convert it into a fully connected layer and perform a classification for class label and regression for the bounding boxes.  "
    }, {
    "id": 11,
    "url": "http://localhost:4000/curious-case-of-henry-molaison/",
    "title": "The Curious Case of Henry Molaison",
    "body": "2020/11/01 - The human brain is one of the most important part of our body and it took millions and millions of years of evolution to achieve this level of perfection. And even after decades of studies, we have only managed to decode a small section of our brain. In the 21st century, one of the most well established theory about our brain is about the way it stores information i. e the concept of long term memory and short term memory and how our brain stores different informations in different manner. If you don’t know what it is, here is a really good video explaining the same. The story behind its discovery is very interesting. It all began from a person famously known as Patient HM in the world of neurosciencec. In order to completely understand the story, we need to travel back in time, back to America in the 1950s where our story takes place. The 20th centuryAfter the world war, there was rapid development in science and technology. But there was one area that was rather crude and not much developed and that is Neuroscience. The knowledge about our brain, mental health and other mental illnesses was not that developed and there weren’t any ethical barriers to performing medical procedures. Patients sufferring from mental illness were locked up in what were known as mental asylums. They were experimented on and the treatments at the asylums were completely crazy and irrational. The patients were electrocuted with high voltages applied to their temples. The patients had to undergo regular hydrotherapy, where they were submerged in extremely cold water to calm them down.    Hydrotherapy in the 1940s. Credit: Alfred Eisenstaedt/Life Pictures/Getty ImagesWe mostly hear about mental asyulms in horror movies, but this was the harsh reality back then. It was a crazy period and there wasn’t much knowledge or awareness about mental health. Then came another revolution in neurosurgery, the Lobotomy. LobotomyThis medical procedure was developed by doctors in Europe. The motto behind lobotomy was that if a certain part of the brain causes problem, just cut it out and everything will be fine. It was thought that cutting certain nerves in brain can fix the excess emotion and stabilize the person. A hole was drilled into the patient’s head from their eyeball socket and and they used to sever brain connections by using knives or by pouring ethanol.  A drawing from Dr. Walter Freeman’s book showing his lobotomy procedureLobotomy was hailed as an innovation, an instant cure for mental patients. There were more than 50,000 of these surgeries performed just in America. Soldiers suffering from PTSD due to the world war, perform Lobotomy and he’ll be instantly cured. If someone is emotionally unstable, perform lobotmy and they’ll be instantly cured. Of course, in reality, lobotomy was not exactly a cure. It was just cutting open the brain and mushing around with the brain tissues.  “As those who watched the procedure described it, a patient would be rendered unconscious by electroshock. Freeman would then take a sharp ice pick-like instrument, insert it above the patient’s eyeball through the orbit of the eye, into the frontal lobes of the brain, moving the instrument back and forth. Then he would do the same thing on the other side of the face. ” -Quoted in the National Public Radio Did these procedures work? No, definitely not. There were very slim chances of surviving such a procedure. The success rate was less than 50% and even amongst those who survived, the lobotomy had negative effects on a patient’s personality, initiative, inhibitions, empathy and ability to function on their own. Those who survived were left as nothing more than empty shells unable to do anything. Henry MolaisonHenry Molaison, popularly known in the world of neuroscience as Patient HM is the foundation for all the knowledge we have about brain. Most of the knowledge that we have about our brain can be traced back to this person.    Molaison in 1953 before his surgeryHenry was born in Connecticut, U. S in 1929. After a bicycle injury at the age of 7, he started suffering from intractable epilepsy. He had minor or partial seizures for many years, and then major or tonic-clonic seizures following his 16th birthday. He used to work on an assembly line but by the age of 27, he had become so incapacitated by his seizures that he could not work nor lead a normal life. The doctors tried various remedies including high dosages of anticonvulsant medication but none of them yielded good results. Dr Scoville, the then neurosurgeon at the Hartford Hospital in Connecticut, decided to perform a lobotmy. Scoville had localized Molaison’s epilepsy to the left and right medial temporal lobes. On 1st September 1953, Molaison allowed surgeons to remove a thumb-sized section of tissue from each side of his brain. It was an experimental procedure that he and his surgeons hoped would quell the seizures wracking his brain. Although there weren’t any strict ethical code for doctors during those times, the lobotomy was said to have been performed with the consent of the patient and his family. Scoville removed Molaison’s medial temporal lobes on both hemispheres including the hippocampus and most of the amygdala and entorhinal cortex, the major sensory input to the hippocampus.  HM's brain after the lobotomy, Credit: Rochelle Bloom, Duke University Surprisingly, the surgery was successful. Molaison’s seizure were abated and more controllable. But Scoville didn’t consider the implications of his surgery. Molaison was left with dense memory loss. He suffered from what we now know as retrograde amnesia. Obviously, this was not scientifically established back then in 1950s. Up until then, it had not been known that the hippocampus was even essential for making memories, and that if we lose both of them we will suffer an amnesia. Once this was realized, the findings were widely publicized so that this operation to remove both hippocampi would never be done again. When Scoville realized his patient had become amnesic, he referred him to the eminent neurosurgeon Dr. Wilder Penfield and neuropsychologist Dr. Brenda Milner of Montreal Neurological Institute (MNI), who assessed him in detail. Penfield and Milner had already been conducting memory experiments on other patients and they quickly realized that Henry’s dense amnesia, his intact intelligence, and the precise neurosurgical lesions made him the perfect experimental subject. For 55 years, Henry participated in numerous experiments, primarily at Massachusetts Institute of Technology (MIT), where Professor Suzanne Corkin and her team of neuropsychologists assessed him. He died in December 2008 at the age of 82. The Research on MolaisonHenry’s memory loss was far from simple. Firstly, he was unable to make any new memories after his operation. He also had moderate retrograde amnesia i. e he could not remember most events in the 1-2 year period prior to his surgery. In some cases, he couldn’t remember events upto 11 years before the time of surgery. He could remember some things — scenes from his childhood, some facts about his parents, and historical events that occurred before his surgery — but he was unable to form new memories. If he met someone who then left the room, within minutes he had no recollection of the person or their meeting. He was perpetually “trapped in the moment,” unable to recall anything beyond 30 seconds. Scoville and Milner described their findings in their 1957 paper titled “Loss of recent memory after Bilateral Hippocampal Lesions”$^{[8]}$. They realized that only patients who had specific portions of their medial temporal lobes removed experienced memory problems. And, the more tissue removed, the more severe the memory impairment. The researchers noted patients’ amnesia was “curiously specific to the domain of recent memory. ” This led to the understanding that complex functions such as learning and memory are tied to discrete regions of the brain. Henry lived for 55 years without acquiring any new declarative memories. His surgery, however, left intact other circuits that supported his nondeclarative memory, so he could learn new motor skills and acquire conditioned responses.  He was a very happy and friendly person and always a delight to be with and to assess. He never seemed to get tired of doing what most people would think of as tedious memory tests, because they were always new to him! When he was at MIT, between test sessions he would often sit doing crossword puzzles, and he could do the same ones again and again if the words were erased, as to him it was new each time. A brief summary of his condition is as follows:  Henry’s short-term memory was intact; whereas he failed to convert short-term memories into long-term memories Forgot new experiences after operation and inability to form new memories His semantic memory for prior to operation was intact (recalled historical facts, recognized relatives, good vocabulary) and had intact procedural memory The episodic memory prior to operation showed deficits His IQ was above average His language, reasoning, and perceptual capacities were normal. The study of Molaison revolutionized the understanding of the organization of human memory. It has provided broad evidence for the rejection of old theories and the formation of new theories on human memory, in particular about its processes and the underlying neural structures. Some of the breakthrough discoveries$^{[8]}$ from his study are as follows:  Partition of memory into short-term and long-term memory processes, each part being mediated by a specialized memory circuit. It became evident from a series of cognitive tests that short-term memory is the immediate present. Its capacity is limited and fades immediately unless (a) We rehearse it or (b) convert it into a form that can be retained in long-term memory. Henry was able to use rehearsal but unable to convert short-term memories into long-term memories Memory as we know it Now   Duration of short-term memory - Henry could easily and accurately perform the task when there was no delay between stimuli, however, the ability to differentiate between stimuli became harder as the gap between them got longer beyond 30s. At 60s, it was just a random performance. The abrupt breakdown in Henry’s performance between 30s and 60s showed that the duration of short-term memory last less than 60 seconds.     Concept of semantic and episodic memory as being distinctly organized in brain - In case of Hnery, most details of unique events were lost (episodic, autobiographical memory) but general knowledge of the world is preserved (semantic memory), indicating that the anatomical substrates for these two forms of memory were distinct. We now know that the medial temporal-lobe structures are engaged in the initial encoding, storage, and retrieval of both kinds of memories. Then, during the process of consolidation, semantic memories become permanently established in the cortex while episodic, autobiographical-memory traces continue to depend on medial temporal-lobe structures indefinitely. Thus, the removal of this tissue from Henry’s brain left him devoid of autobiographical memories     Henry’s spatial memory-declarative memory for spatial locations was deficient. It established the importance of the hippocampus for spatial learning. However, after a few days, he could accurately draw the map of the house where he lived, means that other brain areas took over the job of encoding and storing that rich spatial information. This task depended on the parahippocampal gyrus, part of which remained in Henry’s brain on both sides. Hence, on rare occasions, he somehow compensated for the devastating effect of his hippocampal damage by mobilizing preserved brain structures and networks.     Recognizing that learning can take place without awareness (non-declarative memory) was one of the most significant advances. Henry learnt to use a walker. Dr. Milner introduced the idea that some memory processes were not hippocampus-dependent by showing that Henry’s error scores decreased across 3 days of testing on a motor skill-learning task, that is, mirror tracing. This discovery constituted the first experimental demonstration of preserved learning in amnesia. The “non-declarative memory” typically was not impaired in Henry’s case. Dr. Milner’s view was further strengthened by the touch-guided maze test, which was first demonstration within a single experiment, of impaired declarative learning (failure to learn the correct route) with preserved procedural i. e non-declarative learning.     A healthy hippocampus is essential for vividly recounting the details (recollection), but that it is not essential for simply recognizing a face, without identifying it or placing it in a context (familiarity)     Henry was able to produce conditioned responses in eye blink conditioning experiment, which helped to speculate that the conditioned memory, which was intact, was not mediated by medial temporal lobe.     The brain circuit responsible for odour detection (this bottle contains an odour) and odour intensity discrimination (this odour is stronger) is separate from the circuit that supports odor discrimination (this smells like cloves). Henry could not do latter. We now know that odor discrimination takes place in the front part of the parahippocampal gyrus, the amygdala, and the cortex around the amygdale.  Further StudiesHenry laid the foundation for all the future studies and he was the only patient who was lobotomized. Lobotomy was later banned in the 1970s due to it being “contrary to the principles of humanity”. Henry was not the only patient who was studied on. In the later decades there were several more patients who were under study for example, Kent Cochrane, who suffered from severe anterograde amnesia due to an accident in 1981. His semantic memory was intact but lacked episodic memory. Decades after this event. we still haven’t been able to completely grasp the workings of the human brain. But there has been a considerable growth in the amount of knowledge available to use. We are able to treat mental illness that were considered untreatable back in the 20th century. I beleive that in the future, we will be able to completey understand the workings of human brain and even supersede it. We have already been able to build neural networks which are able to identify and classify faces better than humans. We have also managed to build mechanical systems using deep learning that are able to percieve better than humans. There is a lot to look forward to in the future! References   Barbara Dury, Lobotomy: A Dangerous Fad’s Lingering effect on Mental Illness Treatment https://www. retroreport. org/video/first-do-no-harm/     Ben Cosgrove, Strangers to Reason: LIFE Inside a Psychiatric Hospital, 1938 https://www. retroreport. org/video/first-do-no-harm/     Tanya Lewis, Lobotomy: Definition, Procedure &amp; History https://www. livescience. com/42199-lobotomy-definition. html     National Public Radio, Frequently Asked Questions About Lobotomies https://www. npr. org/templates/story/story. php?storyId=5014565&amp;ps=rs     Jacopo Annese, Natalie M, Hauke Bartsch, Postmortem examination of patient H. M. ’s brain based on histological sectioning and digital 3D reconstructionhttps://www. nature. com/articles/ncomms4122     Barbara Dury, Lobotomy: A Dangerous Fad’s Lingering effect on Mental Illness Treatment https://www. retroreport. org/video/first-do-no-harm/     William Scoville, Brenda Miller, Loss of recent memory after Bilateral Hippocampal Lesionshttps://www. ncbi. nlm. nih. gov/pmc/articles/PMC497229/     Bigya Shah, Raman Deep Pattanayak, Rajesh Sagar, The study of patient henry Molaison and what it taught us over past 50 years: Contributions to neuroscience https://www. jmhhb. org/article. asp?issn=0971-8990;year=2014;volume=19;issue=2;spage=91;epage=93;aulast=Shah  "
    }, {
    "id": 12,
    "url": "http://localhost:4000/welcome-to-my-new-blog/",
    "title": "Welcome to Arvind's Blog",
    "body": "2020/10/25 - Welcome to my new blog. I’ll be posting a lot of interesting stuff here. Stay tuned for more! Why I switched from Medium to a Custom Website: Why did I rip-off a “Medium” looking template instead of writing articles on Medium itself? Well, that’s because: 1. It’s a custom website!: As a web developer, there is nothing better than having a website which you have total control of. I can do whatever I want with it and modify it however I want, no holds barred. Obviously, Medium has a very good template, color scheme and font. Hence this “Mediumish” template. A huge shoutout to Mediumish for developing this awesome template. 2. People can read more than 5 times: Well, the obvious drawback of Medium is that it only allows users to read five free articles a month. That’s fair considering that the authors also need to earn. And since my main motive for writing this blog isn’t money, I don’t need to have any such limitations. 3. Advanced Technical Stuff: Since I am familiar with things like JAMStack, Search Engine Optimization and hosting websites, I find this pipeline to be easier. I host my website on Netlify, which allows me to even use custom domain and provides free SSL certificates. I can do my own SEO and don’t need Medium’s help and I use markdown with Jekyll (JAMStack) which is extremely easy to work with. I can also branch out my domain name into various subdomains and host all kinds of things here. All in all, since I’m tech savvy, this is fairly easy for me and has more advantages than Medium. So here we are! I’ll be posting a lot of stuff (hopefully) on this website now. "
    }, {
    "id": 13,
    "url": "http://localhost:4000/powerful-things-markdown-editor/",
    "title": "Powerful things you can do with the Markdown editor",
    "body": "2018/06/12 - There are lots of powerful things you can do with the Markdown editor. If you’ve gotten pretty comfortable with writing in Markdown, then you may enjoy some more advanced tips about the types of things you can do with Markdown! As with the last post about the editor, you’ll want to be actually editing this post as you read it so that you can see all the Markdown code we’re using. Special formatting: As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:  strike through ==highlight== *escaped characters*Writing code blocks: There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, like this. Larger snippets of code can be displayed across multiple lines using triple back ticks: 123. my-link {  text-decoration: underline;}HTML: 12345&lt;li class= ml-1 mr-1 &gt;  &lt;a target= _blank  href= # &gt;  &lt;i class= fab fa-twitter &gt;&lt;/i&gt;  &lt;/a&gt;&lt;/li&gt;CSS: 12345678. highlight . c {  color: #999988;  font-style: italic; }. highlight . err {  color: #a61717;  background-color: #e3d2d2; }JS: 123456789// alertbar later$(document). scroll(function () {  var y = $(this). scrollTop();  if (y &gt; 280) {    $('. alertbar'). fadeIn();  } else {    $('. alertbar'). fadeOut();  }});Python: 1print( Hello World )Ruby: 123require 'redcarpet'markdown = Redcarpet. new( Hello World! )puts markdown. to_htmlC: 1printf( Hello World ); Reference lists: The quick brown jumped over the lazy. Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference. Full HTML: Perhaps the best part of Markdown is that you’re never limited to just Markdown. You can write HTML directly in the Markdown editor and it will just work as HTML usually does. No limits! Here’s a standard YouTube embed code as an example: "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});